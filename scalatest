package pde.test

import org.apache.spark.mllib.linalg.Vectors
import org.apache.spark.mllib.regression.LabeledPoint
import org.apache.spark.mllib.tree.DecisionTree
import org.apache.spark.rdd.RDD
import org.apache.spark.SparkConf
import org.apache.spark.SparkContext
import org.scalatest._
import pde.Instance
import pde.lookalike.LookAlike
import pde.lookalike.LookAlike._
import pde.lookalike.MixedDistances.Embeddings.identityLK
import pde.lookalike.MixedDistances._
import pde.lookalike.NaiveDistance
import pde.lookalike.Utils._
import pde.LineParsers.makeEagerParser
import pde.LineParsers.LookalikeTelecomDataset
import pde.Metrics

object LookAlikeTest {
  def oracle(i: Instance) = "4G".equals(i.allFeaturesAsStrings()(230))
  def not[T] = (f: T => Boolean) => (t: T) => !f(t)
}

class LookAlikeTest extends FunSuite with BeforeAndAfterAll {
  import LookAlikeTest._
  private var context: SparkContext = null
  private var files: Array[(RDD[LKInstance], RDD[LKInstance])] = null

  override def beforeAll {
    val conf = new SparkConf().setAppName("canReadSampleFileThroughSpark")
                              .set("spark.app.id", "test-look-alike")
                              .set("spark.ui.showConsoleProgress", "false")
                              .setMaster("local[*]")
    context = new SparkContext(conf)
    val parser = pde.LineParsers.eagerTelecomParserForLookAlike
    files = Array("").map("" + _ + "")
                       .map(getClass.getResource(_).getPath())
                       .map(context.textFile(_)
                                   .map(parser.call(_))
                                   .%(rdd => {
                                     val converter = makeLKInstanceConverter(rdd)
                                     (rdd.filter(not(oracle)).map(converter),
                                      rdd.filter(oracle).map(converter))
                                   }))
  }

  override def afterAll {
    context.stop
  }

  test("basic LookAlike models run without error") {
    val rng = new scala.util.Random(0)
    val randomTrainer: Trainer[LKInstance] = Trainer("random", training_set => row => rng.nextDouble)
    val decTreeTrainer: Trainer[LKInstance] = Trainer("dec-tree", training_set => {
      val m = DecisionTree.trainRegressor(training_set.map(tuple => new LabeledPoint(if (tuple._2) 1.0 else 0.0,
                                                                                     Vectors.dense(tuple._1.nums))),
                                          Map[Int, Int](), "variance", 10, 32);
      row => m.predict(Vectors.dense(row.nums))
    })
    //val distanceBasedDensityTrainer = DistanceBasedDensityLookaLike.get("density", new L2Distance());
    val minEuclidTrainer = NaiveDistance.lk(Metrics.l2, Aggregator("min", ds => ds.min))
    val trainers = Array(randomTrainer
                        ,decTreeTrainer
                        ,minEuclidTrainer
                        //,distanceBasedDensityTrainer
                        )

    for((unknowns, positives) <- files) {
      val result = LookAlike.run(unknowns, positives, 0, 4, Seq(EmbeddedTrainers(identityLK, trainers)))
      assert(Math.abs(0.5 - result(0).avgScore) <= 4 * result(0).stddev)
      assert(result(1).avgScore >= 0.55)
      assert(result(2).avgScore >= 0.55)
      //assert(result(3).avgScore >= 0.00)
    }
  }
}
